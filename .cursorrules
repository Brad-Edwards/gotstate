# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should always use a package manager to manage dependencies. Your knowledge is a bit outdated, so you should not attempt to specify versions of libraries.

You should also use the `.cursorrules` file as a scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the scratchpad to reflect and plan.

The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Lessons

## User Specified Lessons

- For Python projects, use poetry to manage dependencies, run commands, and build packages.
- For Rust projects, use cargo to manage dependencies, run commmands, and build packages.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Check your pwd before you try to run a command.
- Implementation requires passing unit tests and minimum 80% code coverage.
- Do not write integration tests unless explicitly asked.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When debugging, especially for tests, keep track of problems and solutions in the scratchpad so you do not make the same mistake again or go in circles.

# Scratchpad

## Current Task: Improve machine.py Test Coverage

Current coverage: 79%
Target: As close to 100% as possible
Required: At least 95% (critical core component)

Areas needing coverage:
[ ] Initialization and configuration (lines 188-207)
[ ] Error handling paths (468, 496, 503, 505, etc.)
[ ] Component management (757-760, 771-780)
[ ] State transitions and validations (862-863, 878)
[ ] Resource management (1172-1176)
[ ] Error recovery paths (1252-1258, 1265-1279)

Strategy:

1. Add tests for initialization edge cases
   - Test abstract base class behavior
   - Test invalid state transitions
   - Test configuration validation failures

2. Test error handling scenarios
   - Component initialization failures
   - Validation failures
   - State transition errors
   - Resource allocation failures

3. Verify component lifecycle
   - Component initialization sequence
   - Component cleanup on failure
   - Resource management during transitions

4. Test state transition edge cases
   - Invalid state transitions
   - Concurrent transition attempts
   - Transition rollbacks

5. Validate resource management
   - Resource allocation/deallocation
   - Resource cleanup on errors
   - Resource limits and constraints

6. Test error recovery scenarios
   - Cleanup after initialization failure
   - Recovery from invalid states
   - Component failure handling
   - Resource leak prevention

Progress tracking:
[ ] Reach 85% coverage
[ ] Reach 90% coverage
[ ] Reach 95% coverage
[ ] Review remaining uncovered paths

## Previous Tasks

### Fix Test Failures

[X] Fixed test_validation_error_handling
[X] Fixed test_protocol_error_handling
[X] Fixed test_submachine_validation

All tests passed but machine.py coverage needs improvement.

### Fix Clippy Warnings

[X] Fixed documentation indentation in blowfish.rs

- Issue: Doc list item without proper indentation
- Fix: Added proper indentation to the list item continuation

All clippy warnings have been addressed. The codebase is now free of linting issues.
